#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <stdarg.h>
/* stop */

typedef struct
m_stack
{
    int    count;
    size_t size;
    void*  content;
    int    capacity;
}
m_stack;
#define m_stack_tos(stack) (stack.content + (stack.size * (stack.count - 1)))

m_stack
_m_stack_init(size_t size)
{
    m_stack m;

    m.count    = 0;
    m.size     = size;
    m.capacity = 2;
    m.content  = malloc(m.capacity * m.size);

    return m;
}

#define m_stack_init(t) (_m_stack_init(sizeof(t)))

void m_stack_push(m_stack* m, void* item)
{
    if (m->count == m->capacity) {
        m->capacity = m->capacity * 3 / 2;
        m->content  = realloc(m->content, m->capacity * m->size);
    }
    memcpy(m->content + m->count, item, m->size);
    m->count++;
}

void* m_stack_pop(m_stack* m)
{
    if (m->count > 0) {
        void* item = malloc(m->size);
        memcpy(item, m->content + (m->count - 1), m->size);
        return item;
    } else return NULL;
}

void m_stack_clear(m_stack* m)
{
    if (m->count > 0) {
        m->capacity = 2;
        m->count = 0;
        m->content = realloc(m->content, m->capacity * m->size);
    }
}

// static FILE* ptg_infile = NULL;

typedef struct
ptg_sc
{
    int ptr;               // pointer val starting at -1
    unsigned int line;     // current line number
    unsigned int column;   // current column number
    struct {
        m_stack  lexeme;   // current lexeme
        m_stack  chbuf;    // unget buffer
        m_stack  tokbuf;   // unlex buffer
        ptgenum lasttok;  // last token returned by lex
    } prog;
    struct {
        m_stack seeks;     // saved positions for seek
        m_stack answers;   // saved answers for answer checking
        m_stack counters;  // saved counters for future updates
    } check;
}
ptg_sc;

static ptg_sc* sc = NULL;

char scan() 
{
    char ch;
    
    if (sc->prog.chbuf.count > 0) {
        ch = *(char*)m_stack_pop(&(sc->prog.chbuf));
    } else {
        fseek(ptg_infile, ++(sc->ptr), SEEK_SET);
        ch = fgetc(ptg_infile);
        sc->column++;
        fseek(ptg_infile, sc->ptr, SEEK_SET);
        if (ch == EOF) 
            return EOF;
    }
    
    if (ch == '\n') {
        sc->line++;
        sc->column = 0;
    }

    m_stack_push(&(sc->prog.lexeme), &ch);
    return ch;
}

void save_pos() {
    m_stack_push(&(sc->check.seeks), &(sc->ptr));
}

void load_pos() {
    int lexcompt = ftell(ptg_infile);

    if (sc->check.seeks.count > 0)
    {
        int p   = *(int*)m_stack_pop(&(sc->check.seeks));
        sc->ptr = p;
        lexcompt -= p;
        for (int i = 0; i < lexcompt; ++i)
            m_stack_pop(&(sc->prog.lexeme));
    }
    else {
        fprintf(stderr, "error: no seek positions have been saved.\n");
        exit(EXIT_FAILURE);
    }
}

char unscan(char ch) {
    m_stack_push(&(sc->prog.chbuf), &ch);
}

void save_bool(bool q) {
    m_stack_push(&(sc->check.answers), &q);
}

bool load_bool() {
    if (sc->check.answers.count > 0) {
        return *(bool*)m_stack_pop(&(sc->check.answers));
    } else {
        fprintf(stderr, "error: no answers have been saved.\n");
        exit(EXIT_FAILURE);
    }
}

void new_counter() {
    int q = 0;
    m_stack_push(&(sc->check.counters), &q);
}

int count() {
    if (sc->check.counters.count > 0) {
        return *(int*)m_stack_pop(&(sc->check.counters));
    } else {
        fprintf(stderr, "error: no counters have been saved.\n");
        exit(EXIT_FAILURE);
    }
}

int inc_counter() {
    if (sc->check.counters.count > 0) {
        ++(*(int*)m_stack_tos(sc->check.counters));
    } else {
        fprintf(stderr, "error: no counters have been saved.\n");
        exit(EXIT_FAILURE);
    }
}

#define ptg_tokret(val) do {\
    sc->prog.lasttok = (val);\
    return (val);\
} while(0);

char* ptg_lexeme() {
    char* res = (char*)malloc((sc->prog.lexeme.count + 1) * sizeof(char));
    memcpy(res, sc->prog.lexeme.content, sc->prog.lexeme.count * sizeof(char));
    res[sc->prog.lexeme.count] = '\0';
    return res;
}

#define ptgvrberr(...) do {\
    fprintf(stderr, __VA_ARGS__);\
    fprintf(stderr, " at (%d:%d)\n", sc->line, sc->column);\
    exit(EXIT_FAILURE);\
} while (0)

ptgenum
ptglex()
{
    int ch;
    if (sc == NULL)
    {
        sc = (ptg_sc*)malloc(sizeof(ptg_sc));

        sc->ptr    = -1;
        sc->line   = 0;
        sc->column = 0;

        sc->prog.lexeme = m_stack_init(char);
        sc->prog.chbuf  = m_stack_init(char);
        sc->prog.tokbuf = m_stack_init(ptgenum);

        sc->check.seeks    = m_stack_init(int);
        sc->check.answers  = m_stack_init(bool);
        sc->check.counters = m_stack_init(int);
    }

    if (sc->prog.lexeme.count > 0) {
        m_stack_clear(&(sc->prog.lexeme));
    }

    if (sc->prog.tokbuf.count > 0) {
        ptgenum tok = *(ptgenum*)m_stack_pop(&(sc->prog.tokbuf));
        return tok;
    }

    m_stack_clear(&(sc->check.seeks));
    m_stack_clear(&(sc->check.answers));
    m_stack_clear(&(sc->check.counters));

    while (1)
    {
        save_pos();
        if (scan() == EOF) {
            ptg_tokret(P_TOK_END); 
        } else load_pos();

/* stop */
        else ptgvrberr("invalid character found");
    }
}

void ptgunlex(ptgenum tok) {
    m_stack_push(&(sc->prog.tokbuf), &tok);
}

/* stop */

#define PTGGOTO   1
#define PTG_ERROR  0
#define PTGSHIFT  2
#define PTGREDUCE 3
#define PTGACCEPT 4

typedef struct ptg_pdata {
    int action;
    union { 
        int shift;
        int sgoto;
        char accept;
        char error;
        struct { 
            int rule;
            int count;
            ptgenum lhs_tok;
        } reduce; 
    } op;
} ptg_tdata;

#define ptg_table_next(table, state, token) (*(table + ((state) * P_ELEMENT_COUNT) + (token)))

static inline void
ptg_table_set(ptg_tdata* table, int state, ptgenum token, ptg_tdata data)
{
    ptg_tdata old = ptg_table_next(table, state, token);
    if (old.action != PTG_ERROR) {
        if (old.action == PTGSHIFT && data.action == PTGREDUCE) {
            fprintf(stderr, "warning: shift-reduce conflict at (state#%d, %s)\n", state, ptgenum_string(token));
            fprintf(stderr, "opting to shift...\n");
            return;
        }
        if (old.action == PTGREDUCE && data.action == PTGSHIFT) {
            fprintf(stderr, "warning: shift-reduce conflict at (state#%d, %s)\n", state, ptgenum_string(token));
            fprintf(stderr, "opting to shift...\n");
        }
        if (old.action == PTGREDUCE && data.action == PTGREDUCE) {
            fprintf(stderr, "error: reduce-reduce conflict at (state#%d, %s)\n", state, ptgenum_string(token));
            exit(EXIT_FAILURE);
        }
    }

    ptg_table_next(table, state, token) = data;
}

static inline ptg_tdata*
ptg_table_init()
{
    ptg_tdata* table = (ptg_tdata*)calloc(P_STATE_COUNT * P_ELEMENT_COUNT, sizeof(ptg_tdata));

/* stop */

    return table;
}

ptgast* ptg_parse()
{
    // stacks
    m_stack nodes  = m_stack_init(ptgast*);
    m_stack states = m_stack_init(int);

    // table stuff
    ptg_tdata next   = {0};
    ptg_tdata *table = ptg_table_init();

    // parser variables
    int state      = 0;
    ptgenum tmpa   = 0;
    ptgenum a      = 0;
    ptgast* newast = NULL;
    
    // parser initialization
    a = ptglex();
    m_stack_push(&states, &state);

    while (1)
    {
        if (states.count < 1) {
            fprintf(stderr, "empty state stack!\n");
            exit(EXIT_FAILURE);
        }

        state  = *(int*)m_stack_tos(states);
        newast = NULL;
        next   = ptg_table_next(table, state, a);

        switch (next.action)
        {
            case PTGSHIFT:
                // push state to stack
                m_stack_push(&states, &(next.op.shift));

                // create new ast, which is an ATOM
                newast = (ptgast*)malloc(sizeof(ptgast));
                newast->id = PTGASTATOM;
                newast->op.atom = ptg_lexeme();

                // push new ast
                m_stack_push(&nodes, &newast);
                
                // get new token
                a = ptglex();

                // break
                break;

            case PTGREDUCE:
                // handle different cases
                switch (next.op.reduce.rule) 
                {
/* stop */
                }

                // push ast
                m_stack_push(&nodes, &newast);

                // pop states
                for (int i = 0; i < next.op.reduce.count; ++i)
                    m_stack_pop(&states);

                // simulate goto step
                tmpa  = next.op.reduce.lhs_tok;
                state = *(int*)m_stack_tos(states);
                next  = ptg_table_next(table, state, tmpa);
                
                // if goto step fails, error (of course)
                if (next.action != PTGGOTO) {
                    fprintf(stderr, "invalid token \"%s\" in state#d.\n", ptgenum_string(tmpa), state);
                    exit(EXIT_FAILURE);
                }
                
                // otherwise, push goto state
                m_stack_push(&states, &(next.op.sgoto));
                break;

            case PTGGOTO:
                m_stack_push(&states, &(next.op.sgoto));
                break;

            case PTGACCEPT:
                newast = *(ptgast**)m_stack_pop(&nodes);
                return newast;

            case PTG_ERROR:
                fprintf(stderr, "invalid token \"%s\" in state%d.\n", ptgenum_string(a), state);
                exit(EXIT_FAILURE);
        }
    }
}

// this is for testing scanner
int main(int argc, char** argv)
{
	if (argc != 2) {
		fprintf(stderr, "not enough args.\n");
		return EXIT_FAILURE;
	}

	ptg_infile = fopen(argv[1], "r");
	if (ptg_infile == NULL) {
		fprintf(stderr, "couldn't open file.\n");
		return EXIT_FAILURE;
	}

	ptgenum tok;
	do {
		tok = ptglex();
		printf("%s\n", ptgenum_string(tok));
	} while (tok != P_TOK_END);

	return EXIT_SUCCESS;
}

#undef ptg_table_next