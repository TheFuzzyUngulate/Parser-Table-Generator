#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <stdarg.h>
/* stop */

typedef struct
m_stack
{
    int    count;
    size_t size;
    void*  content;
    int    capacity;
}
m_stack;
#define m_stack_tos(stack) (stack.content + (stack.size * (stack.count - 1)))

m_stack
_m_stack_init(size_t size)
{
    m_stack m;

    m.count    = 0;
    m.size     = size;
    m.capacity = 2;
    m.content  = malloc(m.capacity * m.size);

    return m;
}

#define m_stack_init(t) (_m_stack_init(sizeof(t)))

void m_stack_push(m_stack* m, void* item)
{
    if (m->count == m->capacity) {
        m->capacity = m->capacity * 3 / 2;
        m->content  = realloc(m->content, m->capacity * m->size);
    }
    memcpy(m->content + (m->size * m->count), item, m->size);
    m->count++;
}

void* m_stack_pop(m_stack* m)
{
    if (m->count > 0) {
        void* item = malloc(m->size);
		m->count--;
        memcpy(item, m->content + (m->size * m->count), m->size);
        return item;
    } else return NULL;
}

void m_stack_clear(m_stack* m)
{
    if (m->count > 0) {
        m->capacity = 2;
        m->count = 0;
        m->content = realloc(m->content, m->capacity * m->size);
    }
}

typedef struct
m_string
{
    char* str;
    size_t len;
}
m_string;

m_string m_string_init()
{
    m_string m;

    m.len = 0;
    m.str = (char*)calloc(128, 1);

    return m;
}

void m_string_push(m_string* m, char ch)
{
    if ((m->len + 2) % 128 == 0) {
        m->str = (char*)realloc(m->str, (m->len + 1) + 128);
        memset(m->str + m->len + 1, 0, 128);
    }
    *(m->str + m->len) = ch;
    m->len++;
}

void m_string_concat(m_string* m, char* str)
{
    char* buf;
    size_t al;
    size_t bl;
    size_t tl;

    al = (m->len + 1);
    if (al % 128 != 0) {
        al &= ~((1 << 7) - 1);
        al += 128; 
    }

    bl = strlen(str);
    
    tl = al + bl;
    if (tl % 128 != 0) {
        tl &= ~((1 << 7) - 1);
        tl += 128;
    }
    
    buf = (char*)calloc(tl, 1);
    memcpy(buf, m->str, m->len);
    memcpy(buf + m->len, str, bl);
    free(m->str);
    m->str = buf;
    m->len = m->len + bl;
}

char* m_string_get(m_string* m)
{
    char* buf = (char*)calloc(m->len + 1, 1);
    memcpy(buf, m->str, m->len);
    return buf;
}

void m_string_clear(m_string* m)
{
    free(m->str);
    m->len = 0;
    m->str = (char*)calloc(128, 1);
}

char** m_string_split(m_string* m, int* len, char delim)
{
    int k = 0;
    char** res = NULL;
    m_string tmp = m_string_init();

    for (char* ptr = m->str; *ptr != '\0'; ++ptr) {
        if (*ptr == delim) {
            k++;
            if (!res) res = (char**)malloc(sizeof(char*) * k);
            else res = (char**)realloc(res, sizeof(char*) * k);
            res[k-1] = m_string_get(&tmp);
            m_string_clear(&tmp);
        } else m_string_push(&tmp, *ptr);
    }

    if (tmp.len > 0) {
        k++;
        if (!res) res = (char**)malloc(sizeof(char*) * k);
        else res = (char**)realloc(res, sizeof(char*) * k);
        res[k-1] = m_string_get(&tmp);
        m_string_clear(&tmp);
    }

    *len = k;
    return res;
}

#define m_string_getline(m, len) m_string_split(m, len, '\n')

// static FILE* ptg_infile = NULL;

typedef struct
ptg_sc
{
    int ptr;               // pointer val starting at -1
    unsigned int line;     // current line number
    unsigned int column;   // current column number
    struct {
        m_stack  lexeme;   // current lexeme
        m_stack  chbuf;    // unget buffer
        m_stack  tokbuf;   // unlex buffer
        ptgenum lasttok;  // last token returned by lex
    } prog;
    struct {
        m_stack seeks;     // saved positions for seek
        m_stack answers;   // saved answers for answer checking
        m_stack counters;  // saved counters for future updates
    } check;
}
ptg_sc;

static ptg_sc* sc = NULL;

char scan() 
{
    char ch;
    
    if (sc->prog.chbuf.count > 0) {
        ch = *(char*)m_stack_pop(&(sc->prog.chbuf));
    } else {
        fseek(ptg_infile, ++(sc->ptr), SEEK_SET);
        ch = fgetc(ptg_infile);
        sc->column++;
        fseek(ptg_infile, sc->ptr, SEEK_SET);
        if (ch == EOF) 
            return EOF;
    }
    
    if (ch == '\n') {
        sc->line++;
        sc->column = 0;
    }

    m_stack_push(&(sc->prog.lexeme), &ch);
    return ch;
}

void save_pos() {
    m_stack_push(&(sc->check.seeks), &(sc->ptr));
}

void load_pos() {
    int lexcompt = ftell(ptg_infile);

    if (sc->check.seeks.count > 0)
    {
        int p   = *(int*)m_stack_pop(&(sc->check.seeks));
        sc->ptr = p;
        lexcompt -= p;
        for (int i = 0; i < lexcompt; ++i)
            m_stack_pop(&(sc->prog.lexeme));
    }
    else {
        fprintf(stderr, "error: no seek positions have been saved.\n");
        exit(EXIT_FAILURE);
    }
}

void update_pos() {
    if (sc->check.seeks.count > 0) {
        *(int*)m_stack_tos(sc->check.seeks) = sc->ptr;
    } else {
        fprintf(stderr, "error: no seek positions have been saved.\n");
        exit(EXIT_FAILURE);
    }
}

void get_pos() {
    if (sc->check.seeks.count > 0) {
        sc->ptr = *(int*)m_stack_tos(sc->check.seeks);
    } else {
        fprintf(stderr, "error: no seek positions have been saved.\n");
        exit(EXIT_FAILURE);
    }
}

char unscan(char ch) {
    m_stack_push(&(sc->prog.chbuf), &ch);
}

void save_bool(bool q) {
    m_stack_push(&(sc->check.answers), &q);
}

bool load_bool() {
    if (sc->check.answers.count > 0) {
        return *(bool*)m_stack_pop(&(sc->check.answers));
    } else {
        fprintf(stderr, "error: no answers have been saved.\n");
        exit(EXIT_FAILURE);
    }
}

void new_counter() {
    int q = 0;
    m_stack_push(&(sc->check.counters), &q);
}

int count() {
    if (sc->check.counters.count > 0) {
        return *(int*)m_stack_pop(&(sc->check.counters));
    } else {
        fprintf(stderr, "error: no counters have been saved.\n");
        exit(EXIT_FAILURE);
    }
}

int inc_counter() {
    if (sc->check.counters.count > 0) {
        ++(*(int*)m_stack_tos(sc->check.counters));
    } else {
        fprintf(stderr, "error: no counters have been saved.\n");
        exit(EXIT_FAILURE);
    }
}

#define ptg_tokret(val) do {\
    sc->prog.lasttok = (val);\
    return (val);\
} while(0);

char* ptg_lexeme() {
    char* res = (char*)malloc((sc->prog.lexeme.count + 1) * sizeof(char));
    memcpy(res, sc->prog.lexeme.content, sc->prog.lexeme.count * sizeof(char));
    res[sc->prog.lexeme.count] = '\0';
    return res;
}

#define ptgvrberr(...) do {\
    fprintf(stderr, __VA_ARGS__);\
    fprintf(stderr, " at (%d:%d)\n", sc->line, sc->column);\
    exit(EXIT_FAILURE);\
} while (0)

ptgenum
ptglex()
{
    int ch;
    int jmp;
    if (sc == NULL)
    {
        sc = (ptg_sc*)malloc(sizeof(ptg_sc));

        sc->ptr    = -1;
        sc->line   = 0;
        sc->column = 0;

        sc->prog.lexeme = m_stack_init(char);
        sc->prog.chbuf  = m_stack_init(char);
        sc->prog.tokbuf = m_stack_init(ptgenum);

        sc->check.seeks    = m_stack_init(int);
        sc->check.answers  = m_stack_init(bool);
        sc->check.counters = m_stack_init(int);
    }

    if (sc->prog.lexeme.count > 0) {
        m_stack_clear(&(sc->prog.lexeme));
    }

    if (sc->prog.tokbuf.count > 0) {
        ptgenum tok = *(ptgenum*)m_stack_pop(&(sc->prog.tokbuf));
        return tok;
    }

    m_stack_clear(&(sc->check.seeks));
    m_stack_clear(&(sc->check.answers));
    m_stack_clear(&(sc->check.counters));

    save_pos();
    ch = scan();

    while (1)
    {
        if (ch == EOF) {
            ptg_tokret(P_TOK_END); 
        } else {
			get_pos();
			ch = scan();
		}

/* stop */
        else ptgvrberr("invalid character found");
    }
}

void ptgunlex(ptgenum tok) {
    m_stack_push(&(sc->prog.tokbuf), &tok);
}

/* stop */

#define PTGGOTO   1
#define PTG_ERROR  0
#define PTGSHIFT  2
#define PTGREDUCE 3
#define PTGACCEPT 4

typedef struct ptg_pdata {
    int action;
    union { 
        int shift;
        int sgoto;
        char accept;
        char error;
        struct { 
            int rule;
            int count;
            ptgenum lhs_tok;
        } reduce; 
    } op;
} ptg_tdata;

#define ptg_table_next(table, state, token) (*(table + ((state) * P_ELEMENT_COUNT) + (token)))

static inline void
ptg_table_set(ptg_tdata* table, int state, ptgenum token, ptg_tdata data)
{
    ptg_tdata old = ptg_table_next(table, state, token);
    if (old.action != PTG_ERROR) {
        if (old.action == PTGSHIFT && data.action == PTGREDUCE) {
            fprintf(stderr, "warning: shift-reduce conflict at (state#%d, %s)\n", state, ptgenum_string(token));
            fprintf(stderr, "opting to shift...\n");
            return;
        }
        if (old.action == PTGREDUCE && data.action == PTGSHIFT) {
            fprintf(stderr, "warning: shift-reduce conflict at (state#%d, %s)\n", state, ptgenum_string(token));
            fprintf(stderr, "opting to shift...\n");
        }
        if (old.action == PTGREDUCE && data.action == PTGREDUCE) {
            fprintf(stderr, "error: reduce-reduce conflict at (state#%d, %s)\n", state, ptgenum_string(token));
            exit(EXIT_FAILURE);
        }
    }

    ptg_table_next(table, state, token) = data;
}

static inline ptg_tdata*
ptg_table_init()
{
    ptg_tdata* table = (ptg_tdata*)calloc(P_STATE_COUNT * P_ELEMENT_COUNT, sizeof(ptg_tdata));

/* stop */

    return table;
}

ptgast* ptg_parse()
{
    // stacks
    m_stack nodes  = m_stack_init(ptgast*);
    m_stack states = m_stack_init(int);

    // table stuff
    ptg_tdata next   = {0};
    ptg_tdata *table = ptg_table_init();

    // parser variables
    int state      = 0;
    ptgenum tmpa   = 0;
    ptgenum a      = 0;
    ptgast* newast = NULL;
    
    // parser initialization
    a = ptglex();
    m_stack_push(&states, &state);

    while (1)
    {
        if (states.count < 1) {
            fprintf(stderr, "empty state stack!\n");
            exit(EXIT_FAILURE);
        }

        state  = *(int*)m_stack_tos(states);
        newast = NULL;
        next   = ptg_table_next(table, state, a);

        switch (next.action)
        {
            case PTGSHIFT:
                // push state to stack
                m_stack_push(&states, &(next.op.shift));

                // create new ast, which is an ATOM
                newast = (ptgast*)malloc(sizeof(ptgast));
                newast->id = PTGASTATOM;
                newast->op.atom = ptg_lexeme();

                // push new ast
                m_stack_push(&nodes, &newast);
                
                // get new token
                a = ptglex();

                // break
                break;

            case PTGREDUCE:
                // handle different cases
                switch (next.op.reduce.rule) 
                {
/* stop */
                }

                // push ast
                m_stack_push(&nodes, &newast);

                // pop states
                for (int i = 0; i < next.op.reduce.count; ++i)
                    m_stack_pop(&states);

                // simulate goto step
                tmpa  = next.op.reduce.lhs_tok;
                state = *(int*)m_stack_tos(states);
                next  = ptg_table_next(table, state, tmpa);
                
                // if goto step fails, error (of course)
                if (next.action != PTGGOTO) {
                    fprintf(stderr, "invalid token \"%s\" in state#d.\n", ptgenum_string(tmpa), state);
                    exit(EXIT_FAILURE);
                }
                
                // otherwise, push goto state
                m_stack_push(&states, &(next.op.sgoto));
                break;

            case PTGGOTO:
                m_stack_push(&states, &(next.op.sgoto));
                break;

            case PTGACCEPT:
                newast = *(ptgast**)m_stack_pop(&nodes);
                return newast;

            case PTG_ERROR:
                fprintf(stderr, "invalid token \"%s\" in state%d.\n", ptgenum_string(a), state);
                exit(EXIT_FAILURE);
        }
    }
}

#define SPACING_COUNT 2

#define addspacing(str, compt) do {\
	for (int i = 0; i < (compt)*SPACING_COUNT; ++i)\
		m_string_push((str), ' ');\
} while (0);

char* ptgast_str(ptgast* ast, int INDENT)
{
    char* tmp;
    m_string str;

    if (ast)
    {
        switch (ast->id)
        {
/* stop */
        }
    }

    return m_string_get(&str);
}

// this is for testing scanner
int main(int argc, char** argv)
{
	if (argc != 2) {
		fprintf(stderr, "not enough args.\n");
		return EXIT_FAILURE;
	}

	ptg_infile = fopen(argv[1], "r");
	if (ptg_infile == NULL) {
		fprintf(stderr, "couldn't open file.\n");
		return EXIT_FAILURE;
	}

	/*ptgenum tok;
	do {
		tok = ptglex();
		printf("%s\n", ptgenum_string(tok));
	} while (tok != P_TOK_END);*/

	ptgast* ast;
	ast = ptg_parse();
    if (ast) printf(ptgast_str(ast, 0));

	return EXIT_SUCCESS;
}

#undef ptg_table_next