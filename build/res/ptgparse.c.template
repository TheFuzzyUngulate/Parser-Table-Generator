#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <stdarg.h>
/* stop */

#define ptg_stack_tos(stack) (stack.content + (stack.size * (stack.count - 1)))

ptg_stack
_ptg_stack_init(size_t size)
{
    ptg_stack m;

    m.count    = 0;
    m.size     = size;
    m.capacity = 2;
    m.content  = malloc(m.capacity * m.size);

    return m;
}

#define ptg_stack_init(t) (_ptg_stack_init(sizeof(t)))

void ptg_stack_push(ptg_stack* m, void* item)
{
    if (m->count == m->capacity) {
        m->capacity = m->capacity * 3 / 2;
        m->content  = realloc(m->content, m->capacity * m->size);
    }
    memcpy(m->content + (m->size * m->count), item, m->size);
    m->count++;
}

void* ptg_stack_pop(ptg_stack* m)
{
    if (m->count > 0) {
        void* item = malloc(m->size);
		m->count--;
        memcpy(item, m->content + (m->size * m->count), m->size);
        return item;
    } else return NULL;
}

void ptg_stack_clear(ptg_stack* m)
{
    if (m->count > 0) {
        m->capacity = 2;
        m->count = 0;
        m->content = realloc(m->content, m->capacity * m->size);
    }
}

ptg_sc* ptg_sc_init(const char *filename)
{
    ptg_sc* sc;
    FILE* fptr;

	fptr = fopen(filename, "r");
	if (fptr == NULL) {
		fprintf(stderr, "fopen: couldn't open file \"%s\".\n", filename);
	    exit(EXIT_FAILURE);
	}

    sc = (ptg_sc*)malloc(sizeof(ptg_sc));

    sc->line   = 0;
    sc->ptr    = -1;
    sc->column = 0;
    sc->spt    = -1;
    sc->ateof  = false;
    sc->file   = fptr;
    sc->state  = 0;

    sc->prog.chbuf  = ptg_stack_init(char);
    sc->prog.tokbuf = ptg_stack_init(ptgenum);

    sc->check.seeks    = ptg_stack_init(int);
    sc->check.answers  = ptg_stack_init(bool);
    sc->check.counters = ptg_stack_init(int);

    return sc;
}

char scan(ptg_sc *sc)
{
    char ch;
    
    if (sc->prog.chbuf.count > 0) {
        ch = *(char*)ptg_stack_pop(&(sc->prog.chbuf));
    } else {
        fseek(sc->file, ++(sc->ptr), SEEK_SET);
        ch = fgetc(sc->file);
        fseek(sc->file, sc->ptr, SEEK_SET);
        if (ch == EOF) 
            return EOF;
    }

    if (ch == '\n') {
        sc->line++;
        sc->column = 0;
    } else sc->column++;

    return ch;
}

void save_pos(ptg_sc *sc) {
    ptg_stack_push(&(sc->check.seeks), &(sc->ptr));
}

void load_pos(ptg_sc *sc) 
{
    if (sc->check.seeks.count > 0)
    {
        int p = *(int*)ptg_stack_pop(&(sc->check.seeks));
        sc->ptr = p;
    }
    else {
        fprintf(stderr, "error: no seek positions have been saved.\n");
        exit(EXIT_FAILURE);
    }
}

void update_pos(ptg_sc *sc) {
    if (sc->check.seeks.count > 0) {
        *(int*)ptg_stack_tos(sc->check.seeks) = sc->ptr;
    } else {
        fprintf(stderr, "error: no seek positions have been saved.\n");
        exit(EXIT_FAILURE);
    }
}

void get_pos(ptg_sc *sc) {
    if (sc->check.seeks.count > 0) {
        int p = *(int*)ptg_stack_tos(sc->check.seeks);
        sc->ptr = p;
    } else {
        fprintf(stderr, "error: no seek positions have been saved.\n");
        exit(EXIT_FAILURE);
    }
}

char unscan(ptg_sc *sc, char ch) {
    ptg_stack_push(&(sc->prog.chbuf), &ch);
}

void save_bool(ptg_sc *sc, bool q) {
    ptg_stack_push(&(sc->check.answers), &q);
}

bool load_bool(ptg_sc *sc) {
    if (sc->check.answers.count > 0) {
        return *(bool*)ptg_stack_pop(&(sc->check.answers));
    } else {
        fprintf(stderr, "error: no answers have been saved.\n");
        exit(EXIT_FAILURE);
    }
}

void new_counter(ptg_sc *sc) {
    int q = 0;
    ptg_stack_push(&(sc->check.counters), &q);
}

int count(ptg_sc *sc) {
    if (sc->check.counters.count > 0) {
        return *(int*)ptg_stack_pop(&(sc->check.counters));
    } else {
        fprintf(stderr, "error: no counters have been saved.\n");
        exit(EXIT_FAILURE);
    }
}

int inc_counter(ptg_sc *sc) {
    if (sc->check.counters.count > 0) {
        ++(*(int*)ptg_stack_tos(sc->check.counters));
    } else {
        fprintf(stderr, "error: no counters have been saved.\n");
        exit(EXIT_FAILURE);
    }
}

/*#define ptg_tokret(sc, val) do {\
    sc->prog.lasttok = (val);\
	printf("%s, %s.\n", ptgenum_string(val), ptg_lexeme());\
    return (val);\
} while(0);*/

#define ptg_tokret(val) do {\
    sc->prog.lasttok = (val);\
    return (val);\
} while(0);

char* ptg_lexeme(ptg_sc *sc)
{
	int len = sc->ptr - sc->spt; 
    char *res = (char*)malloc((len + 1) * sizeof(char));
    fseek(sc->file, sc->spt + 1, SEEK_SET);
    for (int i = 0; i < len; ++i)
        res[i] = fgetc(sc->file);
    
    res[len] = '\0';
    fseek(sc->file, sc->ptr, SEEK_SET);
    return res;
}

#define ptgvrberr(sc, ...) do {\
    fprintf(stderr, __VA_ARGS__);\
    fprintf(stderr, " %s at (%d:%d)\n", ptg_lexeme(sc), sc->line, sc->column);\
    exit(EXIT_FAILURE);\
} while (0)

ptgenum
ptglex(ptg_sc* sc)
{
    int ch;
    int jmp;
    int bptr;

    if (sc->prog.tokbuf.count > 0) {
        ptgenum tok = *(ptgenum*)ptg_stack_pop(&(sc->prog.tokbuf));
        return tok;
    }

    ptg_stack_clear(&(sc->check.seeks));
    ptg_stack_clear(&(sc->check.answers));
    ptg_stack_clear(&(sc->check.counters));

    save_pos(sc);
/* stop */
    sc->spt = sc->ptr;

    while (1)
    {
/* stop */
    }
}

void ptgunlex(ptg_sc *sc, ptgenum tok) {
    ptg_stack_push(&(sc->prog.tokbuf), &tok);
}

/* stop */

#define PTGGOTO   1
#define PTG_ERROR  0
#define PTGSHIFT  2
#define PTGREDUCE 3
#define PTGACCEPT 4

typedef struct ptg_pdata {
    int action;
    union { 
        int shift;
        int sgoto;
        char accept;
        char error;
        struct { 
            int rule;
            int count;
            ptgenum lhs_tok;
        } reduce; 
    } op;
} ptg_tdata;

#define ptg_table_next(table, state, token) (*(table + ((state) * P_ELEMENT_COUNT) + (token)))

static inline void
ptg_table_set(ptg_tdata* table, int state, ptgenum token, ptg_tdata data)
{
    ptg_tdata old = ptg_table_next(table, state, token);
    if (old.action != PTG_ERROR) {
        if (old.action == PTGSHIFT && data.action == PTGREDUCE) {
            fprintf(stderr, "warning: shift-reduce conflict at (state#%d, %s)\n", state, ptgenum_string(token));
            fprintf(stderr, "opting to shift...\n");
            return;
        }
        if (old.action == PTGREDUCE && data.action == PTGSHIFT) {
            fprintf(stderr, "warning: shift-reduce conflict at (state#%d, %s)\n", state, ptgenum_string(token));
            fprintf(stderr, "opting to shift...\n");
        }
        if (old.action == PTGREDUCE && data.action == PTGREDUCE) {
            fprintf(stderr, "error: reduce-reduce conflict at (state#%d, %s)\n", state, ptgenum_string(token));
            exit(EXIT_FAILURE);
        }
    }

    ptg_table_next(table, state, token) = data;
}

static inline ptg_tdata*
ptg_table_init()
{
    ptg_tdata* table = (ptg_tdata*)calloc(P_STATE_COUNT * P_ELEMENT_COUNT, sizeof(ptg_tdata));

/* stop */

    return table;
}

ptgast* ptg_parse(ptg_sc *sc)
{
    // stacks
    ptg_stack nodes  = ptg_stack_init(ptgast*);
    ptg_stack states = ptg_stack_init(int);

    // table stuff
    ptg_tdata next   = {0};
    ptg_tdata *table = ptg_table_init();

    // parser variables
    int state      = 0;
    ptgenum tmpa   = 0;
    ptgenum a      = 0;
    ptgast* newast = NULL;
    
    // parser initialization
    a = ptglex(sc);
    ptg_stack_push(&states, &state);

    while (1)
    {
        if (states.count < 1) {
            fprintf(stderr, "empty state stack!\n");
            exit(EXIT_FAILURE);
        }

        state  = *(int*)ptg_stack_tos(states);
        newast = NULL;
        next   = ptg_table_next(table, state, a);

        switch (next.action)
        {
            case PTGSHIFT:
                // push state to stack
                ptg_stack_push(&states, &(next.op.shift));

                // create new ast, which is an ATOM
                newast = (ptgast*)malloc(sizeof(ptgast));
                newast->id = PTGASTATOM;
/* stop */

                // push new ast
                ptg_stack_push(&nodes, &newast);
                
                // get new token
                a = ptglex(sc);

                // break
                break;

            case PTGREDUCE:
                // handle different cases
                switch (next.op.reduce.rule) 
                {
/* stop */
                }

                // push ast
                ptg_stack_push(&nodes, &newast);

                // pop states
                for (int i = 0; i < next.op.reduce.count; ++i)
                    ptg_stack_pop(&states);

                // simulate goto step
                tmpa  = next.op.reduce.lhs_tok;
                state = *(int*)ptg_stack_tos(states);
                next  = ptg_table_next(table, state, tmpa);
                
                // if goto step fails, error (of course)
                if (next.action != PTGGOTO) {
                    fprintf(stderr, "invalid token \"%s\" in state#d.\n", ptgenum_string(tmpa), state);
                    exit(EXIT_FAILURE);
                }
                
                // otherwise, push goto state
                ptg_stack_push(&states, &(next.op.sgoto));
                break;

            case PTGGOTO:
                ptg_stack_push(&states, &(next.op.sgoto));
                break;

            case PTGACCEPT:
                newast = *(ptgast**)ptg_stack_pop(&nodes);
                return newast;

            case PTG_ERROR:
                fprintf(stderr, "invalid token \"%s\" in state%d.\n", ptgenum_string(a), state);
                exit(EXIT_FAILURE);
        }
    }
}

#define SPACING_COUNT 2

#define addspacing(compt) do {\
	for (int i = 0; i < (compt)*SPACING_COUNT; ++i)\
		putchar(' ');\
} while (0);

void ptgast_str(ptgast* ast, int INDENT)
{
    if (ast)
    {
/* stop */
    }
}

// this is for testing scanner
int main(int argc, char** argv)
{
	if (argc != 2) {
		fprintf(stderr, "not enough args.\n");
		return EXIT_FAILURE;
	}

    ptg_sc *sc;
    ptgenum tok;
    ptgast* ast;

    sc  = ptg_sc_init(argv[1]);
    ast = ptg_parse(sc);
    ptgast_str(ast, 0);

	return EXIT_SUCCESS;
}

#undef ptg_table_next