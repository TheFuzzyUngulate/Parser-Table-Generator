for (auto x : _hf->getTransitions()) 
{
    auto a = x.first.first;
    auto b = x.first.second;
    auto c = x.second;
    if (b.at(0) == '#') {
        ofile << "\tptg_table_next(" << a << ", " << _elementtoks[b] << ").name = SHIFT;\n";
        ofile << "\tptg_table_next(" << a << ", " << _elementtoks[b] << ").state = " << c << ";\n";
        ofile << "\tptg_table_next(" << a << ", " << _elementtoks[b] << ").funcindex = -1;\n";
        ofile << "\tptg_table_next(" << a << ", " << _elementtoks[b] << ").size = -1;\n";
        ofile << "\ttable[" << a << "][" << _elementtoks[b] << "].size = 0;\n\n";
    }
    else {
        ofile << "\ttable[" << a << "][" << _elementtoks[b] << "].name = GOTO;\n";
        ofile << "\tptg_table_next(" << a << ", " << _elementtoks[b] << ").state = " << c << ";\n";
        ofile << "\ttable[" << a << "][" << _elementtoks[b] << "].funcindex = -1;\n";
        ofile << "\ttable[" << a << "][" << _elementtoks[b] << "].size = 0;\n\n";
    }
}

auto states = _hf->getStates();
auto transitions = _hf->getTransitions();
auto follow_set = _hf->getFollowSet();

for (int i = 0; i < _hf->getStateCount(); ++i) {
    for (int j = 0; j < states[i].size(); ++j) {
        auto handle = states[i][j];
        if (handle.closed()) {
            auto rule = handle.getRule();
            auto rule_lhs = rule->getLeft();
            auto lhs_name = rule_lhs->getName();
            auto reduce_triggers = follow_set[lhs_name + "@" + std::to_string(i)];

            if (lhs_name == "S*") {
                file << "\ttable[" << i << "][" << _elementtoks["$"] << "].name = ACCEPT;\n";
                file << "\ttable[" << i << "][" << _elementtoks["$"] << "].state = 0;\n";
                file << "\ttable[" << i << "][" << _elementtoks["$"] << "].funcindex = -1;\n";
                file << "\ttable[" << i << "][" << _elementtoks["$"] << "].size = 0;\n\n";
                continue;
            }
            
            std::set<std::string> found;
            for (auto follow : follow_set) {
                auto head = follow.first;
                auto tagloc = std::find(head.rbegin(), head.rend(), '@');
                auto index = std::distance(tagloc, head.rend()) -1;
                auto content = head.substr(0, index);

                if (content == lhs_name) {
                    for (auto dest : follow.second) {
                        if (dest == "$") 
                            content = dest;
                        else {
                            tagloc = std::find(dest.rbegin(), dest.rend(), '@');
                            index = std::distance(tagloc, dest.rend()) -1;
                            content = "#" + dest.substr(1, index-2);
                        }

                        if (found.find(content) == found.end()) 
                            found.insert(content); else continue;

                        file << "\ttable[" << i << "][" << _elementtoks[content] << "].name = REDUCE;\n";
                        file << "\tptg_table_next(" << i << ", " << _elementtoks[content] << ").state = " << transitions[HandleDictPair(i, lhs_name)] << ";\n";
                        file << "\tptg_table_next(" << i << ", " << _elementtoks[content] << ").funcindex = " << j << ";\n";
                        file << "\ttable[" << i << "][" << _elementtoks[content] << "].size = " << rule->getRight()->getChildren().size() << ";\n\n";
                    }
                }
            }
        }
    }
}