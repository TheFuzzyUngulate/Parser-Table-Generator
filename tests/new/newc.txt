LPAR       \(
RPAR       \)
LBRACE     \{
RBRACE     \}
LBRACK     \[
RBRACK     \]
ID         [A-Za-z][A-Za-z0-9]*
{
    IF     if
    FOR    for
    ELSE   else
    RETURN return
    BREAK  break
    IN     in
}
INT        [0-9]+
STRING     "([\w!#-&\(-\[\]-\}]|\\[tnr"'])*"
PLUS       \+
MINUS      \-
MULT       \*
DIV        /
MOD        %
COMMA      ,
AND        and|&&
OR         or|\|\|
NEG        not|~
EQ         is|==
ASSIGN     =
NEQ        ~=
GEQ        >=
GT         >
LEQ        <=
LT         <
SEMICOLON  ;
ELLIPSIS   \.\.\.

%%
%ignore \w
%ignore \t
%ignore \n
%nodecollapse

%start Start

Start => { TopLevelDecl } ;

TopLevelDecl => VarDecl SEMICOLON | FuncDecl ;

VarDecl => Type Name ;

Name => ID ;

Type => ID ;

FuncDecl => Type Name Args Block ;

Args => LPAR [ ArgDecl { COMMA ArgDecl } ] RPAR ;

ArgDecl => Type Name ;

Block => LBRACE { Statement } RBRACE ;

Statement => BrackStmt SEMICOLON | IfStmt | ForStmt ;

BrackStmt => VarDecl | EmptyStmt | Expression | ReturnStmt | BreakStmt ;

EmptyStmt => empty ;

Expression => Expr8 ASSIGN Expression
       | Expr8
       ;

Expr8 => Expr7 OR Expr8
       | Expr7
       ;

Expr7 => Expr6 AND Expr7
       | Expr6
       ;

Expr6 => Expr5 EQ Expr6
       | Expr5 NEQ Expr6
       | Expr5
       ;

Expr5 => Expr4 GEQ Expr5
       | Expr4 GT Expr5
       | Expr4 LEQ Expr5
       | Expr4 LT Expr5
       | Expr4
       ;

Expr4 => Expr3 PLUS Expr4
       | Expr3 MINUS Expr4
       | Expr3
       ;

Expr3 => Expr2 MULT Expr3
       | Expr2 DIV Expr3
       | Expr2 MOD Expr3
       | Expr2
       ;

Expr2 => MINUS Expr2
       | NEG Expr2
       | Expr1
       ;

Expr1 => Expr1 Args
       | Expr1 Index
       | Operand
       ;

Args => LPAR ExpressionList RPAR ;

Index => LBRACK [ Operand ] RBRACK ;

Operand => Literal | Name | LPAR Expression RPAR ;

ExpressionList => [ Expression { COMMA Expression } ] ;

Literal => INT | STRING | List ;

List => LBRACE ListExpr RBRACE ;

ListExpr => ExpressionList [ COMMA ELLIPSIS ] ;

ReturnStmt => RETURN [ Expression ] ;

BreakStmt => BREAK ;

IfStmt => IF Expression Block [ ELSE IfStmt | ELSE Block ] ;

ForStmt => FOR Expression Block ;