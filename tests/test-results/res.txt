now printing LALR(1)
    rule: Type
        lit, "TypeName"
    rule: TypeName
        lit, "identifier"
    rule: Block
        tok, "{"
        lit, "StatementList"
        tok, "}"
    rule: StatementList
        lit, "Statement"
        tok, ";"
        lit, "StatementList"
    rule: StatementList
        empty
    rule: Declaration
        lit, "VarDecl"
    rule: TopLevelDecl
        lit, "Declaration"
    rule: TopLevelDecl
        lit, "FunctionDecl"
    rule: VarDecl
        tok, "var"
        lit, "VarSpec"
    rule: VarSpec
        lit, "identifier"
        lit, "Type"
    rule: FunctionDecl
        tok, "func"
        lit, "FunctionName"
        lit, "Signature"
        lit, "FunctionBody"
    rule: FunctionName
        lit, "identifier"
    rule: FunctionBody
        lit, "Block"
    rule: Signature
        lit, "Parameters"
        lit, "Signature'"
    rule: Signature'
        lit, "Result"
    rule: Signature'
        empty
    rule: Result
        lit, "Type"
    rule: Parameters
        tok, "("
        lit, "Parameters'"
    rule: Parameters'
        lit, "ParameterList"
        lit, "Parameters''"
    rule: Parameters''
        tok, ","
        tok, ")"
    rule: Parameters''
        tok, ")"
    rule: Parameters'
        tok, ")"
    rule: ParameterList
        lit, "ParameterDecl"
        tok, ","
        lit, "ParameterDecl"
        lit, "ParameterList'"
    rule: ParameterList'
        tok, ","
        lit, "ParameterDecl"
        lit, "ParameterList'"
    rule: ParameterList'
        empty
    rule: ParameterDecl
        lit, "identifier"
        lit, "Type"
    rule: Operand
        lit, "Literal"
    rule: Operand
        lit, "OperandName"
    rule: Operand
        tok, "("
        lit, "Expression"
        tok, ")"
    rule: Literal
        lit, "BasicLit"
    rule: BasicLit
        tok, "int_lit"
    rule: BasicLit
        tok, "string_lit"
    rule: OperandName
        lit, "identifier"
    rule: PrimaryExpr
        lit, "Operand"
    rule: PrimaryExpr
        lit, "PrimaryExpr"
        lit, "Arguments"
    rule: Arguments
        tok, "("
        lit, "Arguments'"
    rule: Arguments'
        lit, "ExpressionList"
        lit, "Arguments''"
    rule: Arguments''
        tok, ","
        tok, ")"
    rule: Arguments''
        tok, ")"
    rule: Arguments'
        tok, ")"
    rule: ExpressionList
        lit, "Expression"
        tok, ","
        lit, "Expression"
        lit, "ExpressionList'"
    rule: ExpressionList'
        tok, ","
        lit, "Expression"
        lit, "ExpressionList'"
    rule: ExpressionList'
        empty
    rule: Expression
        lit, "UnaryExpr"
    rule: Expression
        lit, "Expression"
        tok, "binary_op"
        lit, "Expression"
    rule: UnaryExpr
        lit, "PrimaryExpr"
    rule: UnaryExpr
        tok, "unary_op"
        lit, "UnaryExpr"
    rule: Statement
        lit, "Declaration"
    rule: Statement
        lit, "SimpleStmt"
    rule: Statement
        lit, "ReturnStmt"
    rule: Statement
        lit, "BreakStmt"
    rule: Statement
        lit, "Block"
    rule: Statement
        lit, "IfStmt"
    rule: Statement
        lit, "ForStmt"
    rule: SimpleStmt
        lit, "EmptyStmt"
    rule: SimpleStmt
        lit, "ExpressionStmt"
    rule: SimpleStmt
        lit, "Assignment"
    rule: EmptyStmt
        lit, "empty"
    rule: ExpressionStmt
        lit, "Expression"
    rule: Assignment
        lit, "Expression"
        tok, "assign_op"
        lit, "Expression"
    rule: IfStmt
        tok, "if"
        lit, "Expression"
        lit, "Block"
        lit, "IfStmt'"
    rule: IfStmt'
        tok, "else"
        lit, "IfStmt"
    rule: IfStmt'
        tok, "else"
        lit, "Block"
    rule: IfStmt'
        empty
    rule: ForStmt
        tok, "for"
        lit, "ForStmt'"
    rule: ForStmt'
        lit, "Condition"
        lit, "Block"
    rule: ForStmt'
        lit, "Block"
    rule: Condition
        lit, "Expression"
    rule: ReturnStmt
        tok, "return"
        lit, "ReturnStmt'"
    rule: ReturnStmt'
        lit, "Expression"
    rule: ReturnStmt'
        empty
    rule: BreakStmt
        tok, "break"
    rule: SourceFile
        lit, "TopLevelDecl"
        tok, ";"
        lit, "SourceFile"
    rule: SourceFile
        empty
